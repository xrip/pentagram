import{_ as o}from"./index-Dw3yH8Lc.js";class c{constructor(){this.keyPair=null,this.ed25519=null,this.initialized=!1}async init(){if(!this.initialized)try{this.ed25519=await o(()=>import("https://cdn.jsdelivr.net/npm/@noble/ed25519@2.0.0/+esm"),[]),this.initialized=!0,console.log("CryptoManager initialized with @noble/ed25519")}catch(e){throw console.error("Failed to initialize crypto:",e),new Error("Crypto initialization failed")}}async generateKeyPair(){await this.init();try{const e=this.ed25519.utils.randomPrivateKey(),r=await this.ed25519.getPublicKeyAsync(e);return this.keyPair={privateKey:new Uint8Array(e),publicKey:new Uint8Array(r),created:Date.now()},console.log("Generated new Ed25519 key pair"),this.keyPair}catch(e){throw console.error("Key generation failed:",e),new Error("Key generation failed")}}async loadKeyPair(e){if(await this.init(),!e||!e.privateKey||!e.publicKey)throw new Error("Invalid identity data");try{return this.keyPair={privateKey:new Uint8Array(e.privateKey),publicKey:new Uint8Array(e.publicKey),created:e.created||Date.now()},console.log("Loaded existing Ed25519 key pair"),this.keyPair}catch(r){throw console.error("Failed to load key pair:",r),new Error("Failed to load key pair")}}async signMessage(e){if(!this.keyPair)throw new Error("No key pair available. Generate or load keys first.");await this.init();try{const r=new TextEncoder().encode(e),i=await this.ed25519.signAsync(r,this.keyPair.privateKey);return new Uint8Array(i)}catch(r){throw console.error("Message signing failed:",r),new Error("Message signing failed")}}async verifyMessage(e,r,i){await this.init();try{const t=new TextEncoder().encode(e),n=new Uint8Array(i),a=new Uint8Array(r);return await this.ed25519.verifyAsync(a,t,n)}catch(t){return console.error("Message verification failed:",t),!1}}exportIdentity(e){if(!this.keyPair)throw new Error("No identity to export");return{username:e,identity:{publicKey:Array.from(this.keyPair.publicKey),privateKey:Array.from(this.keyPair.privateKey),created:this.keyPair.created},exported:Date.now(),version:"1.0"}}async importIdentity(e){if(!e||!e.identity)throw new Error("Invalid export data");try{return await this.loadKeyPair(e.identity),e.username||null}catch(r){throw console.error("Identity import failed:",r),new Error("Identity import failed")}}getPublicKeyHex(){return this.keyPair?Array.from(this.keyPair.publicKey).map(e=>e.toString(16).padStart(2,"0")).join(""):null}getPublicKeyFingerprint(){const e=this.getPublicKeyHex();return e?e.substring(0,8):null}getUserId(){if(!this.keyPair)return null;const e=this.getPublicKeyHex();return e?e.substring(0,12):null}}export{c as CryptoManager};
