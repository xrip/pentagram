class c{constructor(){this.localStream=null,this.audioContext=null,this.analyser=null,this.microphone=null,this.isActive=!1,this.isMuted=!1,this.volumeCallback=null,this.deviceChangeCallback=null,this.errorCallback=null,this.voiceThreshold=30,this.isSpeaking=!1,this.volumeHistory=[],this.maxVolumeHistory=10,this.audioConstraints={audio:{echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0,sampleRate:44100,channelCount:1},video:!1},this.handleDeviceChange=this.handleDeviceChange.bind(this)}async init(){try{const t=(await navigator.mediaDevices.enumerateDevices()).filter(i=>i.kind==="audioinput");if(t.length===0)throw new Error("No audio input devices found");return console.log("Audio Manager initialized"),console.log(`Found ${t.length} audio input device(s)`),navigator.mediaDevices.addEventListener("devicechange",this.handleDeviceChange),!0}catch(e){throw console.error("Failed to initialize Audio Manager:",e),this.errorCallback&&this.errorCallback("initialization",e),e}}async startVoiceChat(){if(this.isActive)return console.warn("Voice chat is already active"),this.localStream;try{return console.log("Requesting microphone access..."),this.localStream=await navigator.mediaDevices.getUserMedia(this.audioConstraints),console.log("Microphone access granted"),console.log("Stream ID:",this.localStream.id),console.log("Audio tracks:",this.localStream.getAudioTracks().length),await this.setupAudioAnalysis(),this.isActive=!0,this.localStream}catch(e){if(console.error("Failed to access microphone:",e),this.errorCallback){let t="unknown";e.name==="NotAllowedError"?t="permission_denied":e.name==="NotFoundError"?t="device_not_found":e.name==="OverconstrainedError"&&(t="constraints_not_satisfied"),this.errorCallback(t,e)}throw e}}async setupAudioAnalysis(){if(this.localStream)try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.microphone=this.audioContext.createMediaStreamSource(this.localStream),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=512,this.analyser.smoothingTimeConstant=.3,this.microphone.connect(this.analyser),console.log("Audio analysis setup complete"),this.startVoiceActivityDetection()}catch(e){console.error("Failed to setup audio analysis:",e)}}startVoiceActivityDetection(){if(!this.analyser)return;const e=this.analyser.frequencyBinCount,t=new Uint8Array(e),i=()=>{if(!this.isActive||!this.analyser)return;this.analyser.getByteFrequencyData(t);const n=t.reduce((o,s)=>o+s,0)/e;this.volumeHistory.push(n),this.volumeHistory.length>this.maxVolumeHistory&&this.volumeHistory.shift();const a=this.volumeHistory.reduce((o,s)=>o+s,0)/this.volumeHistory.length,r=this.isSpeaking;this.isSpeaking=a>this.voiceThreshold,this.volumeCallback&&this.volumeCallback({volume:Math.round(a),isSpeaking:this.isSpeaking,isMuted:this.isMuted,speakingChanged:r!==this.isSpeaking}),requestAnimationFrame(i)};i()}stopVoiceChat(){console.log("Stopping voice chat..."),this.localStream&&(this.localStream.getTracks().forEach(e=>{e.stop(),console.log("Stopped audio track:",e.id)}),this.localStream=null),this.audioContext&&(this.audioContext.close().catch(e=>{console.warn("Error closing audio context:",e)}),this.audioContext=null),this.analyser=null,this.microphone=null,this.isActive=!1,this.isMuted=!1,this.isSpeaking=!1,this.volumeHistory=[],console.log("Voice chat stopped")}toggleMute(){if(!this.localStream)return console.warn("Cannot toggle mute: no active stream"),!1;const e=this.localStream.getAudioTracks();return e.length===0?(console.warn("Cannot toggle mute: no audio tracks"),!1):(this.isMuted=!this.isMuted,e.forEach(t=>{t.enabled=!this.isMuted}),console.log(`Microphone ${this.isMuted?"muted":"unmuted"}`),this.isMuted)}setMuted(e){if(!this.localStream)return!1;const t=this.localStream.getAudioTracks();return t.length===0?!1:(this.isMuted=e,t.forEach(i=>{i.enabled=!this.isMuted}),console.log(`Microphone ${this.isMuted?"muted":"unmuted"}`),this.isMuted)}async getAudioDevices(){try{return(await navigator.mediaDevices.enumerateDevices()).filter(i=>i.kind==="audioinput").map(i=>({deviceId:i.deviceId,label:i.label||`Microphone ${i.deviceId.slice(0,8)}`,groupId:i.groupId}))}catch(e){return console.error("Failed to get audio devices:",e),[]}}async switchAudioDevice(e){if(!this.isActive)return console.warn("Cannot switch device: voice chat not active"),!1;try{console.log("Switching to audio device:",e),this.localStream&&this.localStream.getTracks().forEach(i=>i.stop());const t={...this.audioConstraints,audio:{...this.audioConstraints.audio,deviceId:{exact:e}}};return this.localStream=await navigator.mediaDevices.getUserMedia(t),await this.setupAudioAnalysis(),console.log("Successfully switched audio device"),!0}catch(t){return console.error("Failed to switch audio device:",t),this.errorCallback&&this.errorCallback("device_switch",t),!1}}handleDeviceChange(){console.log("Audio devices changed"),this.deviceChangeCallback&&this.deviceChangeCallback()}setVoiceThreshold(e){this.voiceThreshold=Math.max(0,Math.min(100,e)),console.log("Voice threshold set to:",this.voiceThreshold)}onVolumeUpdate(e){this.volumeCallback=e}onDeviceChange(e){this.deviceChangeCallback=e}onError(e){this.errorCallback=e}getStatus(){return{isActive:this.isActive,isMuted:this.isMuted,isSpeaking:this.isSpeaking,hasStream:!!this.localStream,hasAudioContext:!!this.audioContext,trackCount:this.localStream?.getAudioTracks().length||0}}destroy(){console.log("Destroying Audio Manager..."),navigator.mediaDevices&&navigator.mediaDevices.removeEventListener("devicechange",this.handleDeviceChange),this.stopVoiceChat(),this.volumeCallback=null,this.deviceChangeCallback=null,this.errorCallback=null,console.log("Audio Manager destroyed")}}export{c as AudioManager};
